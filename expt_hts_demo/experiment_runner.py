#!/usr/bin/python -u

"""Command-line runner for example experiments."""

# Copyright 2011, 2012 Matt Shannon

# This file is part of armspeech.
# See `License` for details of license and warranty.


from __future__ import division

import experiment

import sys
import argparse
import tempfile
import traceback
import numpy as np
import armspeech.numpy_settings

import matplotlib
matplotlib.use('Agg')

# (FIXME : could change this to 'raise' if we extensively test all experiments
#   to make sure they never fail incorrectly with this setting)
np.seterr(all = 'ignore')
np.set_printoptions(precision = 17, linewidth = 10000)

def main(rawArgs):
    parser = argparse.ArgumentParser(
        description = 'Runs example experiments that use the same data as the HTS demo.',
        formatter_class = argparse.ArgumentDefaultsHelpFormatter
    )
    parser.add_argument(
        '--dataDir', dest = 'dataDir', default = 'expt_hts_demo/data', metavar = 'DDIR',
        help = 'base directory for speech parameter files (mgc should be in "mgc" subdirectory, etc)'
    )
    parser.add_argument(
        '--labDir', dest = 'labDir', default = 'expt_hts_demo/data/labels/full', metavar = 'LDIR',
        help = 'directory containing full-context label files'
    )
    parser.add_argument(
        '--scriptsDir', dest = 'scriptsDir', default = 'scripts', metavar = 'SDIR',
        help = 'directory containing scripts used for audio generation (HTS-demo-style Config.pm and gen_wave.pl)'
    )
    parser.add_argument(
        '--baseOutDir', dest = 'baseOutDir', default = 'expt_hts_demo', metavar = 'ODIR',
        help = 'base directory used for experiment output (unique subdirectory is autogenerated)'
    )
    args = parser.parse_args(rawArgs[1:])

    outDir = tempfile.mkdtemp(dir = args.baseOutDir, prefix = 'out.')

    try:
        experiment.run(dataDir = args.dataDir, labDir = args.labDir, scriptsDir = args.scriptsDir, outDir = outDir)
    except:
        traceback.print_exc()
        print
        print '(to delete dir:)'
        print 'rm -r', outDir
        sys.exit(1)

if __name__ == '__main__':
    main(sys.argv)
